# Workflow for testing the project and deploying test results to GitHub Pages.
# This workflow runs on all pushes (except to the coverage branch), pull requests, and can be manually triggered.
# It performs tests across multiple operating systems, generates HTML reports, and deploys them to GitHub Pages.
# After deployment, it sends a notification via LINE.

name: Test and Deploy

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "coverage"
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    env:
      TZ: "Asia/Tokyo"
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-12'
        run: brew install ffmpeg
      - name: Install FFmpeg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y ffmpeg
      - name: Set timezone on Windows
        if: runner.os == 'Windows'
        run: tzutil /s "Tokyo Standard Time"
        shell: cmd
      - name: Install poetry
        run: pip install poetry
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Run tests
        id: pytest
        continue-on-error: true
        run: |
          mkdir -p test_results
          poetry run pytest --html=test_results/report_page.html
        shell: bash
      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "Tests failed. This will be reported in the workflow summary."
          echo "::warning::Tests failed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: test_results
        if: always()

  deploy:
    needs: test
    runs-on: ubuntu-latest
    #if: success() && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Deploy to GitHub Pages
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git fetch origin ghpages:ghpages || git checkout -b ghpages
          git checkout ghpages
          for os in ubuntu-latest macos-12; do
            mkdir -p $os
            if [ -f test-results-$os/report_page.html ]; then
              mv test-results-$os/report_page.html $os/
              if [ -d test-results-$os/assets ]; then
                cp -r test-results-$os/assets $os/
              fi
              git add $os
            else
              echo "No report found for $os"
            fi
          done
          git commit -m "Add test reports to GitHub Pages" || echo "No changes to commit"
          git push origin ghpages --force
      - name: Generate URL list
        id: generate_url_list
        run: |
          URL_LIST=""
          for os in ubuntu-latest macos-12; do
            URL_LIST="${URL_LIST}https://7rikazhexde.github.io/ton-txns-data-conv/${os}/report_page.html\n"
          done
          echo "url_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$URL_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # https://docs.github.com/ja/actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-an-environment
      - name: Send LINE Notify
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          message="Deployment completed.

          Check URL:
          ${{ steps.generate_url_list.outputs.url_list }}"

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer $LINE_NOTIFY_TOKEN" \
            -F "message=${message}"

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1
