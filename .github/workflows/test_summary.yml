# Comprehensive testing workflow for multiple environments
# This workflow runs tests across various OS and Python version combinations.
# It generates coverage reports, posts summaries, and sends notifications.

name: Test Suite

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "coverage"
  pull_request:
  #schedule:
  #  - cron: '*/30 * * * *'

jobs:
  test:
    strategy:
      matrix:
        os: [macos-12, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    env:
      TZ: 'Asia/Tokyo'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Set line-notify flag
        id: set_lnf
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.python-version }}" = "3.12" ];then
            echo "flag=1" >> $GITHUB_OUTPUT
          else
            echo "flag=0" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
      - name: Set timezone on Windows
        if: runner.os == 'Windows'
        run: tzutil /s "Tokyo Standard Time"
        shell: cmd
      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-12'
        run: brew install ffmpeg
      - name: Install FFmpeg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y ffmpeg
      - name: Run ffmpeg
        run: ffmpeg -version
      - name: Install poetry
        run: pip install poetry
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Run test
        id: pytest
        continue-on-error: true
        #run: poetry run pytest --durations=0 --junitxml=pytest.xml --cov-report=term-missing --cov=video_grid_merge tests/ | tee pytest-coverage.txt
        run: poetry run task test_gh_action_term
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          hide-comment: true
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check test results
        if: steps.pytest.outcome == 'failure'
        run: |
          echo "Tests failed. This will be reported in the workflow summary."
          echo "::warning::Tests failed on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
      - name: Write job summary
        id: check_status
        shell: bash
        run: |
          echo -e ${{ steps.coverageComment.outputs.summaryReport }} >> $GITHUB_STEP_SUMMARY

  check_all_tests:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        if: contains(needs.test.result, 'failure')
        run: |
          echo "Some tests failed. Please check the test results and fix any issues before merging."
          exit 1

  send_notification:
    needs: [test, check_all_tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      # https://docs.github.com/ja/actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-an-environment
      - name: Send LINE Notify
        env:
          LINE_NOTIFY_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
        run: |
          status="${{ contains(needs.test.result, 'failure') && 'FAILED' || 'SUCCESS' }}"
          message="'test_summary' workflow completed with status: $status

          Check URL:
          https://github.com/7rikazhexde/ton-txns-data-conv/actions/workflows/test_summary.yml"

          curl -X POST https://notify-api.line.me/api/notify \
            -H "Authorization: Bearer $LINE_NOTIFY_TOKEN" \
            -F "message=${message}"
